var data = (function() {
  var b = new Array(3).fill(1).map(x=>new Array(3).fill(' '));
  var wins = [[[0,0],[0,1],[0,2]],[[1,0],[1,1],[1,2]],[[2,0],[2,1],[2,2]],[[0,0],[1,0],[2,0]],[[0,1],[1,1],[2,1]],[[0,2],[1,2],[2,2]],[[0,0],[1,1],[2,2]],[[2,0],[1,1],[0,2]]];
  var stats = {X:0,O:0,ties:0};
  var symms = [
    [[[0,2],[1,2],[2,2]],[[0,1],[1,1],[2,1]],[[0,0],[1,0],[2,0]]],
    [[[2,2],[2,1],[2,0]],[[1,2],[1,1],[1,0]],[[0,2],[0,1],[0,0]]],
    [[[2,0],[1,0],[0,0]],[[2,1],[1,1],[0,1]],[[2,2],[1,2],[0,2]]],
    [[[0,2],[0,1],[0,0]],[[1,2],[1,1],[1,0]],[[2,2],[2,1],[2,0]]],
    [[[0,0],[1,0],[2,0]],[[0,1],[1,1],[2,1]],[[0,2],[1,2],[2,2]]],
    [[[2,0],[2,1],[2,2]],[[1,0],[1,1],[1,2]],[[0,0],[0,1],[0,2]]],
    [[[2,2],[1,2],[0,2]],[[2,1],[1,1],[0,1]],[[2,0],[1,0],[0,0]]]
  ]
  var id = 1
  var games = []

  function Game(n) {
    this.number = n
    this.moves = []
  }

  // Game.prototype.show = function(i) {
  //   console.log(i+1,'============',this.number,[this.leafID,this.res,this.moves.length])
  //   this.moves.forEach(function(m,i) {
  //     console.log(i+1,m.letter,(m.wins-m.losses)/m.total,[m.wins,m.losses,m.ties,m.total])
  //     m.board.forEach(r=>console.log(r))
  //   })
  // }

  function Move(board,p) {
    this.parent = p || null;
    this.board = board || b;
    this.letter = !p || this.parent.letter === 'X' ? 'O' : 'X';
    this.wins = 0;
    this.losses = 0;
    this.ties = 0;
    this.total = 0;
    this.children = [];
  }

  Move.prototype.gameOver = function() {
    for (var i = 0 ; i < wins.length ; i++) {
      if (wins[i].every(p=>this.board[p[0]][p[1]]===this.letter)) {
        this.winning = wins[i].map(x=>x[0]*3+(x[1]+1))
        return true
      }
    }
  };

  Move.prototype.update = function(res) {
    this.res = res === 'w' ? (this.letter + ' wins!') : ('TIE!')
    var node = this;
    if (res === 't') {
      stats.ties++;
      while (node) {
        node.ties++;
        node.total++;
        node = node.parent;
      }
    }
    else {
      stats[this.letter]++;
      while (node) {
        node.letter === this.letter ? node.wins++ : node.losses++;
        node.total++;
        node = node.parent;
      }
    }
  };

  Move.prototype.makeTree = function() {
    if (this.gameOver()) {this.update('w')}
    else {
      this.board.forEach(function(r,i) {
        r.forEach(function(c,j) {
          if (c === ' ') {
            var nextMove = new Move(this.board.map(x=>x.slice()),this);
            nextMove.board[i][j] = nextMove.letter;
            nextMove.pos = i*3+(j+1);
            this.symmCheck(nextMove.board) && this.children.push(nextMove);
            // this.children.push(nextMove);
          }
        }.bind(this));
      }.bind(this));
      this.children.length ? this.children.forEach(c=>c.makeTree()) : this.update('t');
    }
  };

  Move.prototype.symmCheck = function(b) {
    return this.children.every(c=>
      !symms.some(sym=>
        c.board.every((r,i)=>
          r.every((s,j)=>
            s===b[sym[i][j][0]][sym[i][j][1]]
          )
        )
      )
    )
  }

  Move.prototype.countNodes = function() {
    var nodes = 0;
    var nodesPlayed = 0
    var leaves = 0;
    var leavesPlayed = 0
    c.call(this);
    return {nodes:nodes,nodesPlayed:nodesPlayed,leaves:leaves,leavesPlayed:leavesPlayed};
    function c() {
      nodes++;
      this.played && nodesPlayed++
      if (!this.children.length) {
        leaves++
        this.played && leavesPlayed++
      }
      else {
        this.children.forEach(ch=>c.call(ch)); 
      }
    }
  };

  function pick(a,b) {
    return p(b) > p(a) ? b : a
    function p(n) {
      // return (n.wins - n.losses - (n.ties/2))/n.total
      return (n.wins - n.losses)/n.total
    }
  }

  Move.prototype.go = function() {
    if (this.children.length) {
      var move = this.children.reduce(pick);
      move.played = true;
      move.go();
    }
    else {
      !this.leafID && (this.leafID = id++)
      this.gameOver() ? this.update('w') : this.update('t');
    }
  };
  
  Move.prototype.play = function() {
    return this.children.reduce(pick)
  }

  var tree = new Move();
  tree.makeTree();
  var orig = Object.assign({},stats)
  
  for (var i = 0 ; i < 16889 ; i++) {
    tree.go();
  }
  console.log({X:stats.X-orig.X,O:stats.O-orig.O,ties:stats.ties-orig.ties})
  console.log(tree.countNodes())

  return {
    tree: tree
  }
  
})();

function Square(props) {
  return (
    <div className={props.classes || 'square'} onClick={props.sClick}>{props.val}</div>
  )
}

function Board(props) {
  var board = [[1,2,3],[4,5,6],[7,8,9]]
  function squareClick(p) {
    return props.sClick(p)
  }
  function makeSquares() {
    return board.map((r,i)=>
      <div>{r.map(function(s,j) {
        return props.curr.winning ?
          props.curr.winning.some(w=>w===i*3+(j+1)) ? 
           <Square classes={'square winning'} val={props.curr.board[i][j]}/> :
           <Square val={props.curr.board[i][j]}/> :
            !props.curr.children.some(c=>c.pos===board[i][j]) ?
            <Square val={props.curr.board[i][j]} /> :
            <Square classes='square pos' sClick={()=>squareClick(board[i][j])} val={props.curr.board[i][j]} />
    })}</div>)
  }
  return (
    <div className='board'>{makeSquares()}</div>
  )
}

class Application extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      curr: data.tree,
      player: true,
      res: false,
      first: true
    };
  }
  
  compMove() {
    this.changeState(this.state.curr.play(),true)
  }
  
  squareClick(p) {
    this.changeState(this.state.curr.children.filter(x=>x.pos===p)[0],false)
  }
  
  changeState(move,b) {
    var r = move.children.length ? false : true
    this.setState({curr:move,player:b,res:r})
  }
  
  auto() {
    this.setState({curr:data.tree,player:false,res:false,first:false})
  }
  
  human() {
    this.setState({curr:data.tree,player:true,res:false,first:true})
  }
  
  renderButtons() {
    return this.state.first ?
      <button onClick={()=> this.auto()}>let the computer go first</button> :
      <button onClick={()=> this.human()}>let the human go first</button>
  }
  
  again() {
    var player = this.state.first
    this.setState({curr:data.tree,player:player,res:false})
  }

  render() {
    if (!this.state.player && this.state.curr.children.length) {setTimeout(()=> this.compMove(),1000)}
    return (
      <div id='main'>
        <div id='buttons'>{this.renderButtons()}<button onClick={()=>this.again()}>play again</button></div>
        <div id='banner'>{this.state.res ? this.state.curr.res : this.state.player ? 'your move' : 'COMP'}</div>
        <Board curr={this.state.curr} sClick={(p)=>this.squareClick(p)}/>
      </div>
    )
  }
}

ReactDOM.render(<Application />, document.getElementById("app"));

